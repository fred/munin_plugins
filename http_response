#!/opt/ruby1.9/bin/ruby
#############################################################
# http_reponse - A munin plugin for Linux to monitor 
#                the response time of page loads
#
#############################################################
#
#
# Author: Frederico Araujo
#
#%# family=auto
#%# capabilities=autoconf


require 'net/http'
require 'benchmark'


module Munin
  class ResponseTime
    
    # TODO: pull this from the config file
    def get_urls
      [
        {:url => "http://theultralounge.com/sessions/new", :name => "sessions_new"},
        {:url => "http://theultralounge.com/registrations/new", :name => "registrations_new"},
        {:url => "http://theultralounge.com/events/2", :name => "events_2"},
        {:url => "http://theultralounge.com/events/2/orders/new", :name => "2_orders_new"}
      ]
    end
    
    def run
      urls = get_urls
      urls.each do |url|
        timeoute = Benchmark.measure { 
          response = Net::HTTP.get(URI.parse(url[:url]))
        }
        name = url[:name]
        time = (timeoute.real.round(2)*1000).to_i
        puts "#{name}.value #{time}"
      end
    end
    
    def autoconf
      true
    end
    
  end
end

mpm = Munin::ResponseTime.new

case ARGV[0]
when "config"
  #puts "#{ENV['RAILS_ENV']}"
  puts "graph_title HTTP Response Time (ms)"
  puts "graph_vlabel response (ms)"
  puts "graph_category network"
  puts "graph_scale yes"
  puts "graph_info HTTP Response Time"
  
  mpm.get_urls.each do |url|
    puts "#{url[:name]}.label #{url[:name]}"
    puts "#{url[:name]}.info Response Time (ms)"
    puts "#{url[:name]}.draw AREA"
    puts "#{url[:name]}.type DERIVE"
    puts "#{url[:name]}.min 0"
  end
  
when "autoconf"
  if mpm.autoconf
    puts "yes"
    exit 0
  end
  puts "no"
  exit 1
else
  mpm.run
end
