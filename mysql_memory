#!/usr/bin/env ruby
# 
#%# family=auto
#%# capabilities=autoconf

module Munin
  class MysqlMemory
    
    def run
      pid = get_pid()
      vmrss = get_vmrss(pid)
      vmsize = get_vmsize(pid)
      vmhwm = get_vmhwm(pid)
      puts "resident_memory.value #{vmrss}"
      puts "peak_memory.value #{vmhwm}"
      puts "virtual_memory.value #{vmsize}"
    end
    
    def get_vmrss(pid)
      res = `grep "VmRSS" /proc/#{pid}/status`.split[1]
      if res.match("cannot access")
        return nil
      else
        return (res.to_i)/1024
      end
    end
    
    def get_vmsize(pid)
      res = `grep "VmSize" /proc/#{pid}/status`.split[1]
      if res.match("cannot access")
        return nil
      else
        return (res.to_i)/1024
      end
    end
    
    def get_vmhwm(pid)
      res = `grep "VmHWM" /proc/#{pid}/status`.split[1]
      if res.match("cannot access")
        return nil
      else
        return (res.to_i)/1024
      end
    end
    
    def get_pid
      pid = `pgrep -u mysql mysqld`.split[0].chomp.to_i
      pid
    end

    def autoconf
      get_pid != 0
    end
    
  end
end

mpm = Munin::MysqlMemory.new

case ARGV[0]
when "config"
  #puts "#{ENV['RAILS_ENV']}"
  puts "graph_title Mysql Memory Statistics"
  puts "graph_vlabel Memory (MB)"
  puts "graph_category Mysql"
  puts "graph_args --base 1024 -l 0"
  puts "graph_scale yes"
  puts "graph_info Tracks Statistics of Mysql"
  
  puts "resident_memory.label resident_memory"
  puts "resident_memory.info Resident Memory"
  puts "resident_memory.type GAUGE"
  puts "resident_memory.min 0"
  
  puts "peak_memory.label peak_memory"
  puts "peak_memory.info Peak Memory"
  puts "peak_memory.type GAUGE"
  puts "peak_memory.min 0"
  
  puts "virtual_memory.label virtual_memory"
  puts "virtual_memory.info Virtual Memory"
  puts "virtual_memory.type GAUGE"
  puts "virtual_memory.min 0"
  
when "autoconf"
  if mpm.autoconf
    puts "yes"
    exit 0
  end
  puts "no"
  exit 1
else
  mpm.run
end
